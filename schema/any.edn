[
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; "Any" Model
;;;
;;; "Any" is a variant datatype used to create references to data that
;;; abstract over its representation in the storage model.
;;;
;;; Datomic's data model may seem bifurcated into Literal types and a Reference
;;; type.  Every attribute must be declared to take values that are
;;; either among a small collection of literal data types directly represented
;;; in the underlying database or that they directly reference some other
;;; entity in the graph.  It cannot be both.  Further, the literal types
;;; must be specifically designated as :db.type/long, :db.type/bytes,
;;; :db.type/uuid, and so forth. In a sense, this is not unlike the situation
;;; in Java where you have the similar matter of "primitive" type.
;;;
;;; We have done a good job on the part of "reference" types to implement
;;; this :dt/dt datatype system for entities, but that still that remains
;;; fundamentally disjoint from the system of "literal" types such as strings
;;; and timestamps.  The datatype model we have built so far cannot express
;;; the notion of Variant type (or the "Any" type).
;;;
;;; This Any datatype allows us to (possibly dynamically) reference data
;;; in the Domain Model that abstracts over literal-type, reference-type,
;;; and data-type.
;;;
;;; it allows us to declare a reference to what might be a typed entity in our
;;; meta-model, or it might be some other node in the database, or it might be
;;; a simple piece of literal data.
;;;
;;; Its important to say that "Any" does not represent a root datatype from
;;; which others inherit.  It is not a "top" type it is a "variant" type.
;;; It might happen to contain data of one type or another at any given
;;; time. It does not directly relate to other datatypes through the
;;; :dt/parent hierarchy.
;;;
;;; Notes:
;;;
;;; Datomic's basic data model, when you build on it, can begin to
;;; feel bifurcated into the world of literal
;;; types (:db.type/uuid, :db.type/long...) and the world of references
;;;  and in particular references to nodes built on our (meta) model.
;;;
;;; But it is important to remember that the datomic model is just data in
;;; the graph.  So, poking at :db.type/uuid I was happy to see it was an
;;; entity like any other:
;;;
;;;    (dt/describe :db.type/uuid)
;;;
;;;      => {:db/ident :db.type/uuid,
;;;            :fressian/tag :uuid,
;;;            :db/doc "Value type for UUIDs. Maps to java.util.UUID.",
;;;            :db/id 56}
;;;
;;; So, cool.  Not only are Datomic's literal value types represented as
;;; first-class entities in the graph, but they also seem to be implemented
;;; in an elegant, extensible manner.  The entity that represents a literal
;;; type is simply one augmented with a Fressian codec.  And so easily new
;;; literal types can be added by the straightforward and fairly well known
;;; means of assigning them a new :fressian/tag.
;;;
;;; I was curious what were all of the literal types currently encoded in
;;; my db.  In other words, what were all the :fressian/tag's?
;;;
;;;    (map first
;;;        (d/q '[:find ?t :in $ :where
;;;                   [_ :fressian/tag ?t]] (db/db)))
;;;
;;;   => (:int :bool :inst :string :double :uri :key :datomic/fn :bigint
;;;        :bigdec :uuid :ref :bytes :float)
;;;
;;; Ah, interesting.  This already gives me ideas for future play.  But
;;; first, take notice that there is a tag :ref.  So it shouldn't be
;;; surprising to find that :ref is the :fressian/tag of :db.type/ref
;;;
;;;    (dt/describe :db.type/ref)
;;;
;;;     => {:db/ident :db.type/ref,
;;;            :fressian/tag :ref,
;;;            :db/doc "Value type for references. All references from one
;;;             entity to another are through attributes with this value type.",
;;;            :db/id 20}
;;;
;;; So, there is no bifurcation at all -- data types in the storage model
;;; and associated codecs are implemented as fressian tags.  Data types in
;;; the domain model are represented as first class entities that may be
;;; poked at, inspected, and enhanced.
;;;
;;; Indeed,
;;;
;;;    (dt/describe :fressian/tag)
;;;
;;;       => {:db/ident :fressian/tag,
;;;           :db/valueType :db.type/keyword,
;;;           :db/cardinality :db.cardinality/one,
;;;           :db/index true,
;;;           :db/doc "Keyword-valued attribute of a value type that specifies
;;;                   the underlying fressian type used for serialization.",
;;;           :db/id 39}
;;;
;;; Now that I figured out how it's put together, my work today has been to
;;; create a Variant or "Any" datatype.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;
;;;  Any Attributes
;;;

 [
  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/string
   :db/valueType :db.type/string
   :db/cardinality :db.cardinality/one
   :db/doc "A literal string value"
   :db.install/_attribute :db.part/db}

  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/boolean
   :db/valueType :db.type/boolean
   :db/cardinality :db.cardinality/one
   :db/doc "A literal boolean value"
   :db.install/_attribute :db.part/db}

  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/long
   :db/valueType :db.type/long
   :db/cardinality :db.cardinality/one
   :db/doc "Fixed integer value type. Same semantics as a Java long: 64 bits wide, two's complement binary representation."
   :db.install/_attribute :db.part/db}

  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/bigint
   :db/valueType :db.type/bigint
   :db/cardinality :db.cardinality/one
   :db/doc "Value type for arbitrary precision integers. Maps to java.math.BigInteger on Java platforms."
   :db.install/_attribute :db.part/db}

  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/float
   :db/valueType :db.type/float
   :db/cardinality :db.cardinality/one
   :db/doc "Floating point value type. Same semantics as a Java float: single-precision 32-bit IEEE 754 floating point."
   :db.install/_attribute :db.part/db}

  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/double
   :db/valueType :db.type/double
   :db/cardinality :db.cardinality/one
   :db/doc "Floating point value type. Same semantics as a Java double: double-precision 64-bit IEEE 754 floating point."
   :db.install/_attribute :db.part/db}

  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/bigdec
   :db/valueType :db.type/bigdec
   :db/cardinality :db.cardinality/one
   :db/doc "Value type for arbitrary precision floating point numbers. Maps to java.math.BigDecimal on Java platforms."
   :db.install/_attribute :db.part/db}

  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/ref
   :db/valueType :db.type/ref
   :db/cardinality :db.cardinality/one
   :db/doc "Value type for references. All references from one entity to another are through attributes with this value type. Optionally, the ref'd entity may have :dt/dt attribute that declares its datatype"
   :db.install/_attribute :db.part/db}

  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/instant
   :db/valueType :db.type/instant
   :db/cardinality :db.cardinality/one
   :db/doc "Value type for instants in time. Stored internally as a number of milliseconds since midnight, January 1, 1970 UTC. Maps to java.util.Date on Java platforms."
   :db.install/_attribute :db.part/db}

  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/uuid
   :db/valueType :db.type/uuid
   :db/cardinality :db.cardinality/one
   :db/doc "Value type for UUIDs. Maps to java.util.UUID on Java platforms."
   :db.install/_attribute :db.part/db}

  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/uri
   :db/valueType :db.type/uri
   :db/cardinality :db.cardinality/one
   :db/doc "Value type for URIs. Maps to java.net.URI on Java platforms."
   :db.install/_attribute :db.part/db}

  {:db/id #db/id[:db.part/db]
   :db/ident :any.value/bytes
   :db/valueType :db.type/bytes
   :db/cardinality :db.cardinality/one
   :db/doc "Value type for binary data. Maps to byte array on Java platforms."
   :db.install/_attribute :db.part/db}

  ]

;;;
;;;  Any Datatype
;;;

 [
  {:db/id #db/id[:db.part/user -1]
   :db/ident :any
   :dt/dt :dt/dt
   :dt/parent :t
   :dt/namespace "system"
   :dt/name "Any"
   :db/doc "Any is a variant datatype used to create references to data that abstracts over its representation in the storage model."
   :dt/slots [:any.value/string
              :any.value/boolean
              :any.value/long
              :any.value/bigint
              :any.value/float
              :any.value/double
              :any.value/bigdec
              :any.value/ref
              :any.value/instant
              :any.value/uuid
              :any.value/uri
              :any.value/bytes]}
  ]

;;;
;;;  Any Aggregates
;;;

 [
  {:db/id #db/id[:db.part/user -1]
   :dt/dt :dt/dt
   :dt/namespace "system"
   :dt/name "Any[]"
   :db/ident :any*
   :dt/parent :t*
   :db/doc "Single-dimensional aggregate of Any datatype instances"
   :dt/component :any
   :dt/_list :any
   :dt/slots []}

  {:db/id #db/id[:db.part/user -2]
   :dt/dt :dt/dt
   :dt/namespace "system"
   :dt/name "Any[][]"
   :db/ident :any**
   :dt/parent :t**
   :db/doc "Multi-dimensional aggregate of Any datatype instances"
   :dt/component #db/id[:db.part/user -1]
   :dt/_list #db/id[:db.part/user -1]
   :dt/slots []}
 ]

]
